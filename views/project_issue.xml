<?xml version="1.0" encoding="utf-8"?>
<odoo>

  <!-- Edit issue type form -->
  <record model="ir.ui.view" id="task_type_edit">
    <field name="name">project.task.type.form</field>
    <field name="model">project.task.type</field>
    <field name="inherit_id" ref="project.task_type_edit"/>
    <field name="arch" type="xml">
      <!-- Insert displayed status below name -->
      <xpath expr="//field[@name='name']" position="after">
        <field name="portal_displayed_name"/>
      </xpath>
    </field>
  </record>

  <!-- Edit issue list on portal -->
  <template id="my_issues" inherit_id="website_project_issue.my_issues">
    <xpath expr="//span[@t-esc='issue.stage_id.name']" position="attributes">
      <!-- Prefer portal stage name over administrative stage name -->
      <attribute name="t-esc">issue.stage_id.portal_displayed_name or issue.stage_id.name</attribute>
    </xpath>
  </template>

  <!-- Edit issue page on portal -->
  <template id="my_issues_issue" inherit_id="website_project_issue.my_issues_issue">
    <xpath expr="//span[@t-field='issue.stage_id.name']" position="attributes">
      <!-- Prefer portal stage name over administrative stage name -->
      <attribute name="t-field"></attribute>
      <attribute name="t-esc">issue.stage_id.portal_displayed_name or issue.stage_id.name</attribute>
    </xpath>
  </template>

  <!-- Server action that sends the reminder email
       to the followers of given issue -->
  <record id="action_send_issue_reminder_email" model="ir.actions.server">
    <field name="name">[commown] Send a reminder email concerning an issue</field>
    <field name="model_id" ref="project_issue.model_project_issue"/>
    <field name="sequence">5</field>
    <field name="state">code</field>
    <field name="code"><![CDATA[
email_template = env.ref('commown.mail_template_issue_reminder').id
record.message_post_with_template(email_template)
]]>
    </field>
  </record>

  <!-- Automatic action to execute reminder email send action
       when an issue is put in the dedicated stage -->
  <record id="issue_put_in_reminder_email_stage" model="base.action.rule">
    <field name="name">[commown] Issue was put in the reminder email stage</field>
    <field name="model_id" ref="project_issue.model_project_issue"/>
    <field name="sequence">1</field>
    <field name="kind">on_write</field>
    <field name="filter_pre_domain">[(u'stage_id', u'not ilike', u'[after-sale: reminder-email]')]</field>
    <field name="filter_domain">[(u'stage_id', u'ilike', u'[after-sale: reminder-email]')]</field>
    <field name="server_action_ids" eval="[(6,0,[ref('commown.action_send_issue_reminder_email')])]"/>
  </record>

  <!-- Server action that moves an issue to the "end-ok" stage -->
  <record id="action_move_issue_to_end_ok_stage" model="ir.actions.server">
    <field name="name">[commown] Move issue to the "end-ok" stage</field>
    <field name="model_id" ref="project_issue.model_project_issue"/>
    <field name="sequence">5</field>
    <field name="state">code</field>
    <field name="code"><![CDATA[
stage = env['project.task.type'].search([
    ('project_ids', '=', record.project_id.id),
    ('name', 'like', '[after-sale: end-ok]'),
    ])
record.update({'stage_id': stage.id})
]]>
    </field>
  </record>

  <!-- Automatic action based on time, triggered when the
       delay after the reminder email was sent is large enough -->
  <record id="issue_reminder_delay_expired" model="base.action.rule">
    <field name="name">[commown] Delay after issue reminder email expired</field>
    <field name="model_id" ref="project_issue.model_project_issue"/>
    <field name="sequence">1</field>
    <field name="kind">on_time</field>
    <field name="filter_domain">[(u'stage_id', u'ilike', u'[after-sale: reminder-email]')]</field>
    <field name="trg_date_id" search="[('model', '=', 'project.issue'), ('name', '=', 'date_last_stage_update')]"/>
    <field name="trg_date_range">10</field>
    <field name="trg_date_range_type">day</field>
    <field name="server_action_ids" eval="[(6,0,[ref('commown.action_move_issue_to_end_ok_stage')])]"/>
  </record>

  <!-- Server action that moves an issue to the "reminder-email" stage -->
  <record id="action_move_issue_to_reminder_stage" model="ir.actions.server">
    <field name="name">[commown] Move issue to the reminder-email stage</field>
    <field name="model_id" ref="project_issue.model_project_issue"/>
    <field name="sequence">5</field>
    <field name="state">code</field>
    <field name="code"><![CDATA[
stage = env['project.task.type'].search([
    ('project_ids', '=', record.project_id.id),
    ('name', 'like', '[after-sale: reminder-email]'),
    ])
record.update({'stage_id': stage.id})
]]>
    </field>
  </record>

  <!-- Automatic action based on time, triggered when the
       time spent in the "waiting-customer" stage was too long -->
  <record id="issue_waiting_customer_for_too_long" model="base.action.rule">
    <field name="name">[commown] Time spent waiting for the customer was too long</field>
    <field name="model_id" ref="project_issue.model_project_issue"/>
    <field name="sequence">1</field>
    <field name="kind">on_time</field>
    <field name="filter_domain">[(u'stage_id', u'ilike', u'[after-sale: waiting-customer]')]</field>
    <field name="trg_date_id" search="[('model', '=', 'project.issue'), ('name', '=', 'date_last_stage_update')]"/>
    <field name="trg_date_range">10</field>
    <field name="trg_date_range_type">day</field>
    <field name="server_action_ids" eval="[(6,0,[ref('commown.action_move_issue_to_reminder_stage')])]"/>
  </record>

  <!-- Server action that moves a sleeping issue to
       the "pending" stage when a customer message arrives -->
  <record id="action_awaken_issue_on_partner_message_arrival" model="ir.actions.server">
    <field name="name">[commown] Move customer waiting issue into pending when on message arrival</field>
    <field name="model_id" ref="calendar.model_mail_message"/>
    <field name="sequence">5</field>
    <field name="state">code</field>
    <field name="code"><![CDATA[
if record.model == 'project.issue':
    issue = env[record.model].browse(record.res_id)
    if issue.partner_id == record.author_id and (
            '[after-sale: waiting-customer]' in issue.stage_id.name
            or '[after-sale: end-ok]' in issue.stage_id.name
            or '[after-sale: reminder-email]' in issue.stage_id.name):
        stage = env['project.task.type'].search([
            ('project_ids', '=', issue.project_id.id),
            ('name', 'like', '[after-sale: pending]'),
            ])
        issue.sudo().update({'stage_id': stage.id})
]]>
    </field>
  </record>

  <!-- Automatic action that run on mail.message
       creation when concerning a project.issue -->
  <record id="mail_message_arrival_concerning_issue" model="base.action.rule">
    <field name="name">[commown] A email concerning an issue just arrived</field>
    <field name="model_id" ref="calendar.model_mail_message"/>
    <field name="sequence">1</field>
    <field name="kind">on_create</field>
    <field name="filter_domain">[(u'model', u'=', u'project.issue')]</field>
    <field name="server_action_ids" eval="[(6,0,[ref('commown.action_awaken_issue_on_partner_message_arrival')])]"/>
  </record>

</odoo>
